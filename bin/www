#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('nucampsiteserver:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('secPort', port + 443);  // HTTPS Port

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Create HTTPS server.
 */
const options = {
  key: fs.readFileSync(__dirname + '/../server.key'),
  cert: fs.readFileSync(__dirname + '/../server.cert')
};
const secureServer = https.createServer(options, app);

/**
 * Listen on provided ports, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

secureServer.listen(app.get('secPort'), () => {
  console.log('Secure server listening on port', app.get('secPort'));
});
secureServer.on('error', onError);
secureServer.on('listening', onSecureListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Error handler
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * HTTP Listening handler
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('HTTP Listening on ' + bind);
}

/**
 * HTTPS Listening handler
 */
function onSecureListening() {
  const addr = secureServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('HTTPS Listening on ' + bind);
}
